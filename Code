// Third Person Spaceship Game

// CREDITS AND USED RESOURCES:
// Credit to Frederik Rogalski (openprocessing) https://www.openprocessing.org/sketch/445916
// Credit to Alex Samuel (openprocessing) http://www.openprocessing.org/sketch/66950
// General queries and information: https://processing.org; https://forum.processing.org/two/
// Impact sound effect: http://soundbible.com/346-Metal-Impact-Hollow.html
// Mouse click sound effect: http: http://noisefx.ru/skachat-zvuki-klika-myshi.html
// Spaceship sound effect: https://www.soundjay.com/propeller-plane-sound-effect.html
// Main music theme: Tales - Endless Spaces


// IMPORT LIBRARIES
import ddf.minim.analysis.*;
import ddf.minim.*;
Minim    minim;
AudioPlayer space;
AudioPlayer collision;
AudioPlayer click;
AudioPlayer propeller;

// INITIALISE VARIABLES
PImage scene,spaceship,asteroid;
int OriginX = 330, OriginY = 300; // Origin
int lives = 3;          // Number of lives
int score = 0;           // Initialize variable to store time
int side = 0;           // The trajectories of asteroids
boolean alive = true;   // If lives > 0
PFont myFont;           // Initialise text font

// Time(score) counter
int stopMillis = 0;     //Store elapsed waiting time
int record = 0;         // Store the speed record

float spaceship_x = 300; //x position of the spaceship
float spaceship_y = 560; //y position of the spaceship

float angle = 0;           //Angle of the spaceship
float speed = 1;

final int Greeting = 0;
final int GamePlay = 1;
int state = Greeting;

// ASTEROIDS
float X1 = 0;
float Y1 = 0;
float X2 = 0;
float Y2 = 0;
float X3 = 0;
float Y3 = 0;
float X4 = 0;
float Y4 = 0;

float X = 300; // Origin of asteroids
float Y = 300;

float cx1 = X; // Movement on trajectory 1
float cy1 = Y;

float cx2 = 0; // Movement on trajectory 2,3,4
float cy2 = 0;

// Trajectory coordinates #1 (leftmost)

float ax1 = -300; // Vector a top-left
float ay1 = 160;

float bx1 = -300; // Vector b bottom-left
float by1 = 300;

float dx1 = -120; // Vector d top-right
float dy1 = 160;

// Trajectory coordinates #2 (rightmost)

float ax2 = 300; // Vector a top-right
float ay2 = ay1;
float bx2 = 300; // Vector b bottom-right
float by2 = by1;
float dx2 = 120; // Vector d top-left
float dy2 = dy1;

// Trajectory coordinates #3 (left)

float ax3 = -150; // Vector a top-left
float ay3 = 200; 
float bx3 = -150; // Vector b bottom-left
float by3 = 360; 
float dx3 = -40; // Vector d top-right
float dy3 = 200; 

// Trajectory coordinates #4 (right)

float ax4 = 150; // Vector a top-right
float ay4 = 300; 
float bx4 = 100; // Vector b bottom-right
float by4 = 300; 
float dx4 = 50; // Vector d top-left
float dy4 = 300; 

// Create an array of ambient stars
Stern[] sterne = new Stern [58];
float[] xPos = new float[50];
float[] yPos = new float[50];
float[] xVel = new float[50];
float[] yVel = new float[50];
float[] s = new float[25];
int a = 0;
int b = 0;
int c = 100;
int p = 10;

void setup()
{
 size(603,603,P2D);      // Create a window 
 
 myFont = loadFont("DKThievery.vlw"); // Load text font
 
 // LOAD IMAGES
 scene = loadImage("background.jpg");  // Load image for the background
 spaceship = loadImage("spaceship.png"); // Load spaceship image
 asteroid = loadImage("asteroid1.png"); // Load asteroid image
 textureMode(NORMAL);
 blendMode(BLEND); // Blend new image with the one behind it
 
 // LOAD SOUND
 minim = new Minim(this);
 space = minim.loadFile("Endless_Spaces.mp3"); // Load main theme audio file
 space.loop(); //Keep playing the background music
 collision = minim.loadFile("impact.mp3"); // Load impact sound effect audio file
 click = minim.loadFile("click.mp3"); // Load mouse click audio file
 propeller = minim.loadFile("propeller.mp3"); // Load spaceship sound effect audio file
 
 asteroidReset(); // Make an asteroid start in its origin
 
 // Fill in the array with ambient stars
  for (int i=0;i<sterne.length;i++) 
  {
   sterne[i] = new Stern(); 
  }
  
 // Create ambient stars in random positions 
  for (int i=0; i < 50; i++) 
  {
    xPos[i] = random(1, 599);
  }

  for (int i=0; i < 50; i++) 
  {
    yPos[i] = random(1, 599);
  }
  
  for (int i=0; i < 50; i++) 
  {
    xVel[i] = random(-10, 10);
  }

  for (int i=0; i < 50; i++) 
  {
    yVel[i] = random(-10, 10);
  }
  
  for (int i=0; i < 25; i++) 
  {
    s[i] = random(1, 6);
  }
  
}

void draw()
{
  background(scene); // Set background scene
  tracker();         // Display twinkling stars in the background
  if (state == Greeting) // Display greeting
    {
      textFont(myFont); 
      text ("Start Space Flight",120,height/2); //display "Start Space Flight" on screen
    }
  else 
    {
     mainGame(); // Play the game
    }
}


void mainGame()

{
 background(scene);                  // Set background scene
 score = (millis()/1000)-stopMillis;  // Keep track of flight speed
 speed = 10+score/10;                 // Set value of the flight speed 
 
// Make stars appear from the centre of the screen 
  pushMatrix();
  translate((width/2),(height/2));
  for (int i=0;i<sterne.length;i++) 
  {
        if(sterne[i].sz<1) 
        {
            sterne[i] = new Stern();
        }
   sterne[i].update();
   sterne[i].show();
  }
  popMatrix();
  
  tracker(); //Make stars twinkle in the background

  for (int i=0; i < 25; i++) //Draw circles to represent ambient stars
  {
    noStroke ();
    ellipse(xPos[i], yPos[i], s[i], s[i]);
  }
  
noStroke(); // Do not draw a line around objects

// LOCATION OF SPACESHIP
 pushMatrix(); // Store current location of origin
 translate(spaceship_x,spaceship_y); // Change origin from (0,0) to (spaceship_x,spaceship_y)
 beginShape(); // Open graphics pipeline
 texture(spaceship); // Tell GPU to use spaceship to texture the polygon
 vertex(-70, -60, 0, 0); // upperleft 
 vertex(60, -60, 1, 0); // upperright
 vertex(60, 60, 1, 1); // bottomright
 vertex( -70, 60, 0, 1); //bottomleft
 endShape(CLOSE); // Tell GPU you have loaded shape into memory
 popMatrix(); // Recover origin(0,0)
 
// ASTEROID
 pushMatrix(); // Store current location of origin
 beginShape(); // Open graphics pipeline
 texture(asteroid); // Tell GPU to use asteroid to texture the polygon
 vertex(X1, Y1, 0, 0); // upperleft
 vertex(X2, Y2, 1, 0); // upperright 
 vertex(X3, Y3, 1, 1); // bottomright 
 vertex( X4, Y4, 0, 1); //bottomleft
 endShape(CLOSE); // Tell GPU you have loaded shape into memory
 popMatrix(); // Recover origin(0,0)
 
// ASTEROID TRAJECTORIES
if(side==0) // Use these coordinates and launch asteroids from the leftmost position:
{
 float px1 = calcProjX(ax1,ay1,cx1,cy1); // x component of vector projection
 float py1 = calcProjY(ax1,ay1,cx1,cy1); // y component of vector projection
 float py2 = calcProjY(bx1,by1,cx1,cy1); // y component of vector projection 
 float px2 = calcProjX(dx1,dy1,cx1,cy1); // x component of vector projection  
       
X1 = X-108+px1; 
Y1 = Y+59+py1; 
X2 = X+36+px2; 
Y2 = Y+59+py1; 
X3 = X+36+px2;
Y3 = Y+py2; 
X4 = X-108+px1;
Y4 = Y+py2;

// Launch asteroids from the left while the program is running
 cx1=cx1-(3+score/10); 
 cy1=cy1+(3+score/10);
 
   if (cx1 < -50) //if asteroid reaches the right edge of the screen - reset its position
       {
         asteroidReset(); // Make an asteroid start in its origin
       }  
}

   else if(side==1) // Use these coordinates and launch asteroids from the rightmost position:
  {  
     float px1 = calcProjX(ax2,ay2,cx2,cy2); // x component of vector projection
     float py1 = calcProjY(ax2,ay2,cx2,cy2); // y component of vector projection
     float py2 = calcProjY(bx2,by2,cx2,cy2); // y component of vector projection 
     float px2 = calcProjX(dx2,dy2,cx2,cy2); // x component of vector projection 
        
      X1 = X+px1; 
      Y1 = Y+py1; 
      X2 = X+px2; 
      Y2 = Y+py1; 
      X3 = X+px2;
      Y3 = Y+py2; 
      X4 = X+px1;
      Y4 = Y+py2; 

 // Launch asteroids from the right while the program is running
 cx2=cx2+(3+score/10); 
 cy2=cy2+(3+score/10);
 
   if (cx2 > 360) // If asteroid reaches the left edge of the screen - reset its position
       {
         asteroidReset(); // Make an asteroid start in its origin
       }    
  } 
 
 else if(side==2) // Use these coordinates and launch asteroids from the left
  {  
 float px1 = calcProjX(ax3,ay3,cx2,cy2); // x component of vector projection
 float py1 = calcProjY(ax3,ay3,cx2,cy2); // y component of vector projection
 float py2 = calcProjY(bx3,by3,cx2,cy2); // y component of vector projection 
 float px2 = calcProjX(dx3,dy3,cx2,cy2); // x component of vector projection 
        
X1 = X+px1; 
Y1 = Y+py1; 
X2 = X+px2; 
Y2 = Y+py1; 
X3 = X+px2;
Y3 = Y+1.4*py2; 
X4 = X+px1;
Y4 = Y+1.4*py2;

 // Launch asteroids from the left centre while the program is running
 cx2=cx2-(2+score/10); 
 cy2=cy2+(2+score/10);
 
   if (cx2 <-300) // If asteroid reaches the left edge of the screen-reset its position
       {
         asteroidReset(); // Make an asteroid start in its origin
       }
    
  }
  
  else if(side==3) // Use these coordinates and launch asteroids from the right
   
  {  
 float px1 = calcProjX(ax4,ay4,cx2,cy2); // x component of vector projection
 float py1 = calcProjY(ax4,ay4,cx2,cy2); // y component of vector projection
 float py2 = calcProjY(bx4,by4,cx2,cy2); // y component of vector projection 
 float px2 = calcProjX(dx4,dy4,cx2,cy2); // x component of vector projection 
        
X1 = X+1.6*px1; 
Y1 = Y+py1; 
X2 = X+px2; 
Y2 = Y+py1; 
X3 = X+px2;
Y3 = Y+py2; 
X4 = X+1.6*px1;
Y4 = Y+py2;

 //Launch asteroids from the left centre while the program is running
 cx2=cx2-(4+score/10); 
 cy2=cy2+(4+score/10);
 
   if (cy2>700) //if asteroid reaches the left edge of the screen-reset its position
       {
         asteroidReset(); // Make an asteroid start in its origin
       }
    
  }
 
// SPACESHIP MOVEMENT
// Make the spaceship move in a semi-circle shape
 spaceship_x = 220 * sin(angle) + OriginX;
 spaceship_y = 240 * cos(angle) + OriginY;
 
 
    if(keyPressed==true && keyCode==RIGHT && spaceship_x<530) // Move the spaceship to the right
       {
          angle += 3.0*(PI/180);
       }
    if(keyPressed==true && keyCode==LEFT && spaceship_x>130) // Move the spaceship to the left
       {
          angle -= 3.0*(PI/180);
       }
       
// ASTEROID COLLISION WITH THE SPACESHIP
 if(abs((Y1+Y4)/2-spaceship_y)<65) // If asteroid is close to the spaceship on the y-axis
   {
      if(abs((X3+X4)/2-spaceship_x)<75) // And if asteroid is close to the spaceship on the x-axis
         {
           asteroidReset(); // Make an asteroid start in its origin
           collision.setGain(-15);// Reduce the volume of the sound effect
           collision.rewind(); // Rewind the sound effect
           collision.play(); // Play the sound effect each time an asteroid collides with the spaceship
           lives--;         //reduce lives by one           
         }      
    }
    
// GAME OVER
if(lives<1) 
    {  
      asteroidReset(); // Make an asteroid start in its origin
      spaceship_x = 330; // Make the spaceship static
      spaceship_y = 540;
      alive = false; // Allow "Game Over to be displayed
    }             

if(alive==true) // If lives>0
{
 record = score;
 // Display "Lives" on screen
 textFont(myFont);  
 textSize(40);
 fill(255);
 text("Lives: " + lives,16, 44);
 // Display "Speed" on screen
 textSize(40);
 fill(255);
 text("Speed: " + score + "0 km/h",340,44);
}
else // If lives<0
{
 // Display "Game Over", "Lives: 0" and "Speed Record" on screen
 fill(255);
 textAlign(CENTER, CENTER);
 text("Speed record: "+record+"0 km/h",width/2, height/2);
 text("GAME OVER", width/2, 250);
 
 textSize(40);
 fill(255, 255, 255);
 text("Lives: "+0, 66, 24);
}
}

void asteroidReset() // Make an asteroid appear from its origin
{
    cx1 = X;
    cy1 = Y;
    cx2 = 0;
    cy2 = 0;
    float fside = random(0,4); // initialise a variable to store random numbers from 0 to 3
    side = int(fside); // make each asteroid use a randomly selected trajectory
}

float calcProjX(float x, float y, float xc, float yc) // Create X-component for asteroid trajectory
{
   float dot = (x*xc)+(y*yc);
   float mag = sqrt(pow(x,2)+pow(y,2));
   float component = dot/mag;
   float xu = x / mag;
   float px = component * xu;
   return px;
}

float  calcProjY(float x, float y, float xc, float yc) // Create Y-component for asteroid trajectory
{
   float dot = (x*xc)+(y*yc);
   float mag = sqrt(pow(x,2)+pow(y,2));
   float component = dot/mag;
   float yu = y / mag;
   float py = component * yu;
   return py;
}

class Stern // Ambient stars
{
  float sx;
  float sy;
  float x;
  float y;
  float sz;
  
  Stern() 
    {
      sx = random(-width/20,width/20);
      sy = random(-height/20,height/20);
      sz = random(100,1000);
    }      
    void update() // Update stars speed
    {
      sz -= speed*0.05;
      x = map(sx/sz,0,1,0,width);
      y = map(sy/sz,0,1,0,height);
    }    
    void show() // Display circles to represent stars
    {
     ellipse(x,y,150/sz,150/sz);
     stroke(255);
    }
}

void tracker () // Twinkling stars in the background
{
  smooth ();
  noStroke ();
  line (a, b, c, a);
  a = a + 3;
  if (a == 600) 
  {
    a = 0;
    c = c +100;
    b = b +100;
  }
  stroke (255);
  
  for (int i=0; i < 50; i++) // Draw white lines to simulate twinkling stars
  {
    line (xPos[i]+p, yPos[i], xPos[i], yPos[i]);
    line (xPos[i], yPos[i]+p, xPos[i], yPos[i]);
    line (xPos[i], yPos[i], xPos[i]-p, yPos[i]);
    line (xPos[i], yPos[i], xPos[i], yPos[i]-p);
    
    if (a > yPos[i]-25) 
    {
      p = 5;
    }
    if (a < yPos[i]+25) 
    {
      p = 5;
    }
    if (a < yPos[i]-25) 
    {
      p = 0;
    }
    if (a > yPos[i]+25) 
    {
      p = 0;
    }
    i = i + 1;
  }
}

void mousePressed() // If mouse is pressed - start playing game
{ 
  if (state == Greeting) 
    {
      click.play(); // Play click sound
      propeller.setGain(-30); // Set volume for spaceship sound
      propeller.loop(); // Play spaceship sound
      state = GamePlay;
      stopMillis=(millis()/1000); // Get the value of millis when the gameplay started
    }
  else 
    {
     // Do nothing
    } 
}
